SQL queries used in the pdf presentation:

-- Basic:
-- Retrieve the total number of orders placed
SELECT 
    COUNT(order_id) AS total_number_of_orders 
FROM 
    orders;

-- Calculate the total revenue generated from pizza sales
SELECT
    ROUND(SUM(pizzas.price * order_details.quantity), 2) AS total_revenue
FROM 
    pizzas 
    JOIN order_details ON pizzas.pizza_id = order_details.pizza_id;

-- Identify the highest-priced pizza
SELECT 
    pizza_types.name, 
    pizzas.price
FROM 
    pizza_types 
    JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
ORDER BY 
    pizzas.price DESC 
LIMIT 1;

-- Identify the most common pizza size ordered
SELECT 
    pizzas.size, 
    COUNT(order_details.order_details_id) AS total_count
FROM 
    pizzas 
    JOIN order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY 
    pizzas.size 
ORDER BY 
    total_count DESC;

-- List the top 5 most ordered pizza types along with their quantities
SELECT 
    pizza_types.name, 
    SUM(order_details.quantity) AS total_order
FROM 
    pizza_types 
    JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
    JOIN order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY 
    pizza_types.name 
ORDER BY 
    total_order DESC 
LIMIT 5;

-- Intermediate:
-- Join the necessary tables to find the total quantity of each pizza category ordered
SELECT 
    pizza_types.category, 
    SUM(order_details.quantity) AS total_quantity
FROM 
    pizza_types 
    JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_id
    JOIN order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY 
    pizza_types.category 
ORDER BY 
    total_quantity DESC;

-- Determine the distribution of orders by hour of the day
SELECT 
    HOUR(time) AS hour, 
    COUNT(order_id) AS total_order
FROM 
    orders
GROUP BY 
    hour 
ORDER BY 
    hour ASC;

-- Join relevant tables to find the category-wise distribution of pizzas
SELECT 
    category, 
    COUNT(name) AS 'category-wise distribution'
FROM 
    pizza_types
GROUP BY 
    category;

-- Group the orders by date and calculate the average number of pizzas ordered per day
SELECT 
    AVG(total_quantity) AS 'average number of pizzas ordered per day' 
FROM (
    SELECT 
        orders.date, 
        SUM(order_details.quantity) AS total_quantity
    FROM 
        orders 
        JOIN order_details ON orders.order_id = order_details.order_id
    GROUP BY 
        orders.date
) AS wtc;

-- Determine the top 3 most ordered pizza types based on revenue
SELECT 
    pizza_types.name, 
    SUM(pizzas.price * order_details.quantity) AS revenue
FROM 
    pizza_types 
    JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
    JOIN order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY 
    pizza_types.name
ORDER BY 
    revenue DESC 
LIMIT 3;

-- Advanced:
-- Calculate the percentage contribution of each pizza type to total revenue
SELECT 
    pizza_types.category,
    ROUND(SUM(pizzas.price * order_details.quantity) / (
        SELECT 
            ROUND(SUM(pizzas.price * order_details.quantity), 2) AS total_revenue
        FROM 
            pizzas 
            JOIN order_details ON pizzas.pizza_id = order_details.pizza_id
    ) * 100, 2) AS percentage
FROM 
    pizza_types 
    JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_id
    JOIN order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY 
    pizza_types.category
ORDER BY 
    percentage DESC;

-- Analyze the cumulative revenue generated over time
SELECT 
    date, 
    SUM(total_rev) OVER (ORDER BY date) AS cum_rev 
FROM (
    SELECT 
        orders.date, 
        SUM(pizzas.price * order_details.quantity) AS total_rev
    FROM 
        orders 
        JOIN order_details ON orders.order_id = order_details.order_id
        JOIN pizzas ON order_details.pizza_id = pizzas.pizza_id
    GROUP BY 
        orders.date
) AS wtc;

-- Determine the top 3 most ordered pizza types based on revenue for each pizza category
SELECT 
    category, 
    name, 
    total_rev 
FROM (
    SELECT 
        category, 
        name, 
        total_rev, 
        RANK() OVER (PARTITION BY category ORDER BY total_rev DESC) AS rn 
    FROM (
        SELECT 
            pizza_types.name, 
            pizza_types.category, 
            SUM(pizzas.price * order_details.quantity) AS total_rev
        FROM 
            pizza_types 
            JOIN pizzas ON pizza_types.pizza_type_id = pizzas.pizza_id
            JOIN order_details ON order_details.pizza_id = pizzas.pizza_id
        GROUP BY 
            pizza_types.name, 
            pizza_types.category
    ) AS a
) AS b
WHERE 
    rn <= 3;
